/*
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * CreateTranscriptionRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-22T11:54:28.282623982Z[GMT]")

public class CreateTranscriptionRequest {
  @SerializedName("file")
  private File file = null;

  @SerializedName("model")
  private AnyOfCreateTranscriptionRequestModel model = null;

  @SerializedName("prompt")
  private String prompt = null;

  /**
   * The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
   */
  @JsonAdapter(ResponseFormatEnum.Adapter.class)
  public enum ResponseFormatEnum {
    @SerializedName("json")
    JSON("json"),
    @SerializedName("text")
    TEXT("text"),
    @SerializedName("srt")
    SRT("srt"),
    @SerializedName("verbose_json")
    VERBOSE_JSON("verbose_json"),
    @SerializedName("vtt")
    VTT("vtt");

    private String value;

    ResponseFormatEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ResponseFormatEnum fromValue(String input) {
      for (ResponseFormatEnum b : ResponseFormatEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ResponseFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseFormatEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ResponseFormatEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ResponseFormatEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("response_format")
  private ResponseFormatEnum responseFormat = ResponseFormatEnum.JSON;

  @SerializedName("temperature")
  private BigDecimal temperature = new BigDecimal(0);

  @SerializedName("language")
  private String language = null;

  public CreateTranscriptionRequest file(File file) {
    this.file = file;
    return this;
  }

   /**
   * The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. 
   * @return file
  **/
  @Schema(required = true, description = "The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm. ")
  public File getFile() {
    return file;
  }

  public void setFile(File file) {
    this.file = file;
  }

  public CreateTranscriptionRequest model(AnyOfCreateTranscriptionRequestModel model) {
    this.model = model;
    return this;
  }

   /**
   * ID of the model to use. Only &#x60;whisper-1&#x60; is currently available. 
   * @return model
  **/
  @Schema(example = "whisper-1", required = true, description = "ID of the model to use. Only `whisper-1` is currently available. ")
  public AnyOfCreateTranscriptionRequestModel getModel() {
    return model;
  }

  public void setModel(AnyOfCreateTranscriptionRequestModel model) {
    this.model = model;
  }

  public CreateTranscriptionRequest prompt(String prompt) {
    this.prompt = prompt;
    return this;
  }

   /**
   * An optional text to guide the model&#x27;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. 
   * @return prompt
  **/
  @Schema(description = "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. ")
  public String getPrompt() {
    return prompt;
  }

  public void setPrompt(String prompt) {
    this.prompt = prompt;
  }

  public CreateTranscriptionRequest responseFormat(ResponseFormatEnum responseFormat) {
    this.responseFormat = responseFormat;
    return this;
  }

   /**
   * The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. 
   * @return responseFormat
  **/
  @Schema(description = "The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt. ")
  public ResponseFormatEnum getResponseFormat() {
    return responseFormat;
  }

  public void setResponseFormat(ResponseFormatEnum responseFormat) {
    this.responseFormat = responseFormat;
  }

  public CreateTranscriptionRequest temperature(BigDecimal temperature) {
    this.temperature = temperature;
    return this;
  }

   /**
   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. 
   * @return temperature
  **/
  @Schema(description = "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit. ")
  public BigDecimal getTemperature() {
    return temperature;
  }

  public void setTemperature(BigDecimal temperature) {
    this.temperature = temperature;
  }

  public CreateTranscriptionRequest language(String language) {
    this.language = language;
    return this;
  }

   /**
   * The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. 
   * @return language
  **/
  @Schema(description = "The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. ")
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTranscriptionRequest createTranscriptionRequest = (CreateTranscriptionRequest) o;
    return Objects.equals(this.file, createTranscriptionRequest.file) &&
        Objects.equals(this.model, createTranscriptionRequest.model) &&
        Objects.equals(this.prompt, createTranscriptionRequest.prompt) &&
        Objects.equals(this.responseFormat, createTranscriptionRequest.responseFormat) &&
        Objects.equals(this.temperature, createTranscriptionRequest.temperature) &&
        Objects.equals(this.language, createTranscriptionRequest.language);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Objects.hashCode(file), model, prompt, responseFormat, temperature, language);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTranscriptionRequest {\n");
    
    sb.append("    file: ").append(toIndentedString(file)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    responseFormat: ").append(toIndentedString(responseFormat)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
